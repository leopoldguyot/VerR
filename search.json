[{"path":"https://leopoldguyot.github.io/VerR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 VerR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"https://leopoldguyot.github.io/VerR/articles/VerR.html","id":"create-a-first-environment","dir":"Articles","previous_headings":"1. Setup your environments","what":"Create a first environment","title":"Environment Management in R with VerR","text":"start using VerR, need create new environment. , use envCreate function. function create new environment current working directory, populate specified packages. Note new environment just new directory within .envs/ contains renv project. specify packages want install environment, multiple options: pkg: Install latest version package CRAN. pkg@version: Install specific version package CRAN. username/repo: Install package GitHub. can also specify commit username/repo@commitId. bioc::pkg: Install package Bioconductor. Note install specific version Bioconductor package, recommended install via GitHub. case use GitHub option install dummyPkg package using sleep1 branch. environment created, can verify correctly initialized. , can use envList function. list environments present .envs/ directory. obtain details environment can also use envInfo function display extra information, like installed packages environment.","code":"library(VerR)  envCreate(\"sleep1Env\", \"leopoldguyot/dummyPkg@sleep1\") envList() #> [1] \"sleep1Env\" envInfo(\"sleep1Env\", pkgInfo = TRUE) #> Environment Name: sleep1Env #> Path: .envs/sleep1Env #> Size: 2.98 MB #> Lockfile: Present #> Packages Installed: 2 #> Packages: #>   - dummyPkg (Version: 0.1.1, Source: GitHub) #>   - renv (Version: 1.1.3, Source: Repository)"},{"path":"https://leopoldguyot.github.io/VerR/articles/VerR.html","id":"extracting-the-environments-lockfile","dir":"Articles","previous_headings":"1. Setup your environments","what":"Extracting the environment’s lockFile","title":"Environment Management in R with VerR","text":"save environment configuration can export lockFile target location, allow restore environment later. See ?renv::snapshot information lockFiles. export lockFile can use lockFileExport function. default export lockFiles available environments store files within exportedLockFiles/ directory inside current working directory. can also choose select specific environments target paths lockFiles. lockFile now available exportedLockFiles/ directory:","code":"lockFileExport() #> Exported lockfile from sleep1Env to exportedLockFiles/sleep1Env_lockFile.lock list.files(\"exportedLockFiles\") #> [1] \"sleep1Env_lockFile.lock\""},{"path":"https://leopoldguyot.github.io/VerR/articles/VerR.html","id":"create-an-environment-from-a-lockfile","dir":"Articles","previous_headings":"1. Setup your environments","what":"Create an environment from a lockFile","title":"Environment Management in R with VerR","text":"now use exported lockFile create new environment. environment therefore clone sleep1Env environment. , use envCreate function, time lockFile argument. can check, environment correctly created.","code":"envCreate(\"sleep2Env\", lockFile = \"exportedLockFiles/sleep1Env_lockFile.lock\") envInfo(\"sleep2Env\", pkgInfo = TRUE) #> Environment Name: sleep2Env #> Path: .envs/sleep2Env #> Size: 2.98 MB #> Lockfile: Present #> Packages Installed: 2 #> Packages: #>   - dummyPkg (Version: 0.1.1, Source: GitHub) #>   - renv (Version: 1.1.3, Source: Repository)"},{"path":"https://leopoldguyot.github.io/VerR/articles/VerR.html","id":"update-your-environment","dir":"Articles","previous_headings":"1. Setup your environments","what":"Update your environment","title":"Environment Management in R with VerR","text":"Currently two environments, sleep1Env sleep2Env, contain version dummyPkg package. now update sleep2Env environment use another version dummyPkg package. , use envInstallPackage function. sure package correctly updated, can check installed packages environments. expected, sleep2Env environment now contains dummyPkg package version 0.1.2 sleep1Env environment stills contain version 0.1.1.","code":"envInstallPackage(     package = \"leopoldguyot/dummyPkg@sleep2\",     envName = \"sleep2Env\" ) #> # Downloading packages ------------------------------------------------------- #> - Downloading dummyPkg from GitHub ...          OK [1 Kb in 0.18s] #> Successfully downloaded 1 package in 0.24 seconds. #>  #> The following package(s) will be installed: #> - dummyPkg [leopoldguyot/dummyPkg@sleep2] #> These packages will be installed into \"~/work/VerR/VerR/vignettes/.envs/sleep2Env/renv/library/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu\". #>  #> # Installing packages -------------------------------------------------------- #> - Installing dummyPkg ...                       OK [built from source and cached in 0.99s] #> Successfully installed 1 package in 1 second. #> - The project is out-of-sync -- use `renv::status()` for details. #> The following package(s) will be updated in the lockfile: #>  #> # GitHub --------------------------------------------------------------------- #> - dummyPkg   [ver: 0.1.1 -> 0.1.2; ref: sleep1 -> sleep2; sha: 2916e807 -> 08efd32f] #>  #> - Lockfile written to \"~/work/VerR/VerR/vignettes/.envs/sleep2Env/renv.lock\". envInfo(pkgInfo = TRUE) #> Environment Name: sleep1Env #> Path: .envs/sleep1Env #> Size: 2.98 MB #> Lockfile: Present #> Packages Installed: 2 #> Packages: #>   - dummyPkg (Version: 0.1.1, Source: GitHub) #>   - renv (Version: 1.1.3, Source: Repository) #> Environment Name: sleep2Env #> Path: .envs/sleep2Env #> Size: 2.98 MB #> Lockfile: Present #> Packages Installed: 2 #> Packages: #>   - dummyPkg (Version: 0.1.2, Source: GitHub) #>   - renv (Version: 1.1.3, Source: Repository)"},{"path":"https://leopoldguyot.github.io/VerR/articles/VerR.html","id":"cleaning","dir":"Articles","previous_headings":"","what":"Cleaning","title":"Environment Management in R with VerR","text":"","code":"envDelete(force = TRUE) #> Cleared environment: sleep1Env #> Cleared environment: sleep2Env #> Removed '.envs' directory as no environments are left. unlink(\"exportedLockFiles\",     recursive = TRUE,     force = TRUE )"},{"path":"https://leopoldguyot.github.io/VerR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Léopold Guyot. Author, maintainer.","code":""},{"path":"https://leopoldguyot.github.io/VerR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Guyot L (2025). VerR: Compare performance results different versions package. R package version 0.0.1, https://leopoldguyot.github.io/VerR/.","code":"@Manual{,   title = {VerR: Compare the performance and results of different versions of a package},   author = {Léopold Guyot},   year = {2025},   note = {R package version 0.0.1},   url = {https://leopoldguyot.github.io/VerR/}, }"},{"path":"https://leopoldguyot.github.io/VerR/index.html","id":"verr","dir":"","previous_headings":"","what":"Compare the performance and results of different versions of a package","title":"Compare the performance and results of different versions of a package","text":"VerR offers tools run expression scripts inside custom R environments. environments created help renv package. Using environments, therefore possible easily compare behavior different versions package.","code":""},{"path":"https://leopoldguyot.github.io/VerR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Compare the performance and results of different versions of a package","text":"Get package:","code":"# Check if remotes is installed. Otherwise install it. if (!require(\"remotes\", quietly = TRUE)){     install.packages(\"remotes\") } # Install the package remotes::install_github(\"leopoldguyot/VerR\",     build_manual = TRUE,     build_vignettes = TRUE ) # Load the package library(VerR)"},{"path":[]},{"path":"https://leopoldguyot.github.io/VerR/index.html","id":"create-environments","dir":"","previous_headings":"Usage","what":"Create Environments","title":"Compare the performance and results of different versions of a package","text":"new environment initialized, new directory created inside .envs/ directory. new directory contain installed packages specific environment. creation new environment goes like : specify packages want install within environment can use different syntax: pkg: install latest version pkg CRAN. pkg@version: install specified version pkg CRAN. username/repo: install package GitHub. can also specify commit username/repo@commitId bioc::pkg: install pkg Bioconductor. Note install specific version Bioconductor package recommended install via GitHub. can find information package installation within renv documentation:","code":"envCreate(envName = \"env_name\",           packages = c(\"tidyr\", # CRAN                        \"digest@0.6.18\", # CRAN with specific ver.                        \"bioc::BioBase\", # BioConductor                        \"leopoldguyot/VerR\" # GitHub                        )     ) ?renv::install"},{"path":"https://leopoldguyot.github.io/VerR/index.html","id":"manage-your-environments","dir":"","previous_headings":"Usage","what":"Manage your environments","title":"Compare the performance and results of different versions of a package","text":"","code":"# get the names of your environments envList()  # remove an environment envDelete(envName = \"env_name\")  # remove all your environments envDelete()  # copy a file/dir from your working directory to environments envCopyTo(sourcePath = \"path\",            envName = envList(),            targetPath = \"\" # Where in the env should the file/dir be copied  )  # remove a file/dir from your environments envRemoveFrom(targetPath = \"path\",                envName = envList() )"},{"path":"https://leopoldguyot.github.io/VerR/index.html","id":"run-expression-within-environments","dir":"","previous_headings":"Usage","what":"Run expression within environments","title":"Compare the performance and results of different versions of a package","text":"run expression within environment can directly pass expression runInEnv function. Note need call library() within expression want use packages installed environment. run expression within environment created earlier get: can also use runInEnv evaluate expression within multiple environments. return named list return value environment.","code":"runInEnv(expr = {         packageVersion(\"digest\")     },     envName = \"env_name\" ) \"0.6.18\" runInEnv(expr = {         packageVersion(\"digest\")     },     envName = envList() )"},{"path":"https://leopoldguyot.github.io/VerR/reference/envCopyTo.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy files to environments — envCopyTo","title":"Copy files to environments — envCopyTo","text":"Copy file directory multiple environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envCopyTo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy files to environments — envCopyTo","text":"","code":"envCopyTo(sourcePath, envName = envList(), targetPath = \"\")"},{"path":"https://leopoldguyot.github.io/VerR/reference/envCopyTo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy files to environments — envCopyTo","text":"sourcePath `character(1)` string specifying path file directory copy. envName `character()` vector specifying environment(s) name(s) file copied. Default environments. targetPath `character(1)` string specifying relative path within environment file copied. Default root environment.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new environment — envCreate","title":"Create a new environment — envCreate","text":"Create environment directory installs specified packages.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new environment — envCreate","text":"","code":"envCreate(envName = \"new_env\", packages = NULL, lockFile = NULL)"},{"path":"https://leopoldguyot.github.io/VerR/reference/envCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new environment — envCreate","text":"envName `character(1)` string specifying name environment. Default \"new_env\". packages `character()` vector package names install environment. Default NULL. specify packages want install within environment, can use different syntax: pkg: install latest version package CRAN. pkg@version: install specific version package CRAN. username/repo: install package GitHub.      can also specify commit username/repo@commitId. bioc::pkg: install package Bioconductor. Note install specific version Bioconductor package, recommended install via GitHub. can find information package installation renv::install documentation. lockFile `character()` string specifying path lockFile. Default NULL.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envCreate.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a new environment — envCreate","text":"one `packages` `lockfile` parameters present order create environment. new environment initialized, new directory created inside `.envs/` directory. new directory contain installed packages specific environment.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envDelete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete environments — envDelete","title":"Delete environments — envDelete","text":"Delete environment(s) directory.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envDelete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete environments — envDelete","text":"","code":"envDelete(envName = envList(), force = FALSE)"},{"path":"https://leopoldguyot.github.io/VerR/reference/envDelete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete environments — envDelete","text":"envName `character()` string specifying name(s) environment(s) delete. Default environments. force `logical(1)` specifying whether skip confirmation","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Display environment(s) information — envInfo","title":"Display environment(s) information — envInfo","text":"Display environment status, packages installed, file tree  specified environment(s).","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display environment(s) information — envInfo","text":"","code":"envInfo(   envName = envList(),   statusInfo = TRUE,   pkgInfo = FALSE,   fileInfo = FALSE )"},{"path":"https://leopoldguyot.github.io/VerR/reference/envInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display environment(s) information — envInfo","text":"envName `character()` vector specifying environment(s) name(s). Default environments. statusInfo `logical(1)` specifying whether display status information. pkgInfo `logical(1)` specifying whether display package information. fileInfo `logical(1)` specifying whether display file information.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envInstallPackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Install new package(s) to environment(s) — envInstallPackage","title":"Install new package(s) to environment(s) — envInstallPackage","text":"Install new package(s) environment(s)","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envInstallPackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install new package(s) to environment(s) — envInstallPackage","text":"","code":"envInstallPackage(package, envName = envList())"},{"path":"https://leopoldguyot.github.io/VerR/reference/envInstallPackage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install new package(s) to environment(s) — envInstallPackage","text":"package `character()` vector package name(s) install environment. specify packages want install within environment, can use different syntax: pkg: install latest version package CRAN. pkg@version: install specific version package CRAN. username/repo: install package GitHub.      can also specify commit username/repo@commitId. bioc::pkg: install package Bioconductor. Note install specific version Bioconductor package, recommended install via GitHub. can find information package installation renv::install documentation. envName `character()` string specifying name(s) environment(s) update lockFiles. Default environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envList.html","id":null,"dir":"Reference","previous_headings":"","what":"List existing environments — envList","title":"List existing environments — envList","text":"Return character vector containing names existing environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List existing environments — envList","text":"","code":"envList()"},{"path":"https://leopoldguyot.github.io/VerR/reference/envList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List existing environments — envList","text":"`character()` vector environment names.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envRemoveFrom.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove files from environments — envRemoveFrom","title":"Remove files from environments — envRemoveFrom","text":"Remove file directory multiple environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/envRemoveFrom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove files from environments — envRemoveFrom","text":"","code":"envRemoveFrom(targetPath, envName = envList())"},{"path":"https://leopoldguyot.github.io/VerR/reference/envRemoveFrom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove files from environments — envRemoveFrom","text":"targetPath `character(1)` string specifying relative path within environment file removed. envName `character()` vector specifying environment(s) name(s) file removed. Default environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileExport.html","id":null,"dir":"Reference","previous_headings":"","what":"Export environment lockfile — lockFileExport","title":"Export environment lockfile — lockFileExport","text":"Export environment's lockfile specified location.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileExport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export environment lockfile — lockFileExport","text":"","code":"lockFileExport(envName = envList(), exportPath = NULL)"},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileExport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export environment lockfile — lockFileExport","text":"envName `character()` string specifying name(s) environment(s). Default environments. exportPath `character()` string specifying path(s) lockfile(s) exported. Default auto-generated path.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileExport.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export environment lockfile — lockFileExport","text":"envName exportPath must length.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Update lockFiles of specified environments — lockFileUpdate","title":"Update lockFiles of specified environments — lockFileUpdate","text":"Update lockFiles specified environments","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update lockFiles of specified environments — lockFileUpdate","text":"","code":"lockFileUpdate(envName = envList())"},{"path":"https://leopoldguyot.github.io/VerR/reference/lockFileUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update lockFiles of specified environments — lockFileUpdate","text":"envName `character()` string specifying name(s) environment(s) update lockFiles. Default environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/runInEnv.html","id":null,"dir":"Reference","previous_headings":"","what":"Run expressions in environments — runInEnv","title":"Run expressions in environments — runInEnv","text":"Execute R expressions multiple environments.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/runInEnv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run expressions in environments — runInEnv","text":"","code":"runInEnv(expr, envName = envList())"},{"path":"https://leopoldguyot.github.io/VerR/reference/runInEnv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run expressions in environments — runInEnv","text":"expr R expression evaluated. envName `character()` specifying environment(s) name(s).","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/runInEnv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run expressions in environments — runInEnv","text":"result evaluated expression length(envName) == 1. list results environment length(envName) > 1.","code":""},{"path":"https://leopoldguyot.github.io/VerR/reference/runInEnv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run expressions in environments — runInEnv","text":"","code":"envCreate(\"my_env\", packages = c(\"digest@0.6.18\")) #> - The project is out-of-sync -- use `renv::status()` for details. #> # Downloading packages ------------------------------------------------------- #> - Querying repositories for available source packages ... Done! #> - Downloading digest from Repository ...        OK [125.5 Kb in 0.68s] #> Successfully downloaded 1 package in 1.9 seconds. #>  #> The following package(s) will be installed: #> - digest [0.6.18] #> These packages will be installed into \"~/work/VerR/VerR/docs/reference/.envs/my_env/renv/library/linux-ubuntu-noble/R-4.4/x86_64-pc-linux-gnu\". #>  #> # Installing packages -------------------------------------------------------- #> - Installing digest ...                         OK [built from source and cached in 3.1s] #> Successfully installed 1 package in 3.2 seconds. #> - The project is out-of-sync -- use `renv::status()` for details. #> The following package(s) will be updated in the lockfile: #>  #> # RSPM ----------------------------------------------------------------------- #> - digest   [* -> 0.6.18] #> - renv     [* -> 1.1.3] #>  #> The version of R recorded in the lockfile will be updated: #> - R        [* -> 4.4.3] #>  #> - Lockfile written to \"~/work/VerR/VerR/docs/reference/.envs/my_env/renv.lock\". runInEnv(packageVersion(\"digest\"), \"my_env\") #> [1] ‘0.6.18’ runInEnv(packageVersion(\"digest\")) #> [1] ‘0.6.18’"}]
